# Generated by Django 5.2.7 on 2025-10-10 23:34

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Variant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chromosome', models.CharField(help_text="Chromosome identifier (e.g., '1', 'X', 'MT')", max_length=10)),
                ('position', models.PositiveIntegerField(help_text='Genomic position (1-based)')),
                ('reference_allele', models.CharField(help_text='Reference allele sequence', max_length=100)),
                ('alternate_allele', models.CharField(help_text='Alternate allele sequence', max_length=100)),
                ('variant_id', models.CharField(db_index=True, help_text='Unique variant identifier', max_length=100, unique=True)),
                ('quality_score', models.FloatField(blank=True, help_text='VCF quality score (QUAL field)', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('filter_status', models.CharField(blank=True, help_text='VCF filter status (FILTER field)', max_length=50, null=True)),
                ('gene_symbol', models.CharField(blank=True, db_index=True, help_text="Gene symbol (e.g., 'BRCA1')", max_length=50, null=True)),
                ('transcript_id', models.CharField(blank=True, help_text='Transcript identifier', max_length=100, null=True)),
                ('hgvs_c', models.CharField(blank=True, help_text='HGVS cDNA notation', max_length=200, null=True)),
                ('hgvs_p', models.CharField(blank=True, help_text='HGVS protein notation', max_length=200, null=True)),
                ('consequence', models.CharField(blank=True, help_text="Variant consequence (e.g., 'missense_variant')", max_length=100, null=True)),
                ('impact', models.CharField(blank=True, choices=[('HIGH', 'High'), ('MODERATE', 'Moderate'), ('LOW', 'Low'), ('MODIFIER', 'Modifier')], help_text='Predicted functional impact', max_length=20, null=True)),
                ('gnomad_af', models.FloatField(blank=True, help_text='gnomAD allele frequency (global)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('gnomad_af_afr', models.FloatField(blank=True, help_text='gnomAD allele frequency (African/African American)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('gnomad_af_amr', models.FloatField(blank=True, help_text='gnomAD allele frequency (Latino/Admixed American)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('gnomad_af_eas', models.FloatField(blank=True, help_text='gnomAD allele frequency (East Asian)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('gnomad_af_nfe', models.FloatField(blank=True, help_text='gnomAD allele frequency (Non-Finnish European)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('gnomad_af_sas', models.FloatField(blank=True, help_text='gnomAD allele frequency (South Asian)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('vcf_data', models.JSONField(blank=True, default=dict, help_text='Additional VCF data as JSON')),
            ],
            options={
                'verbose_name': 'Genetic Variant',
                'verbose_name_plural': 'Genetic Variants',
                'ordering': ['chromosome', 'position'],
                'indexes': [models.Index(fields=['chromosome', 'position'], name='variants_va_chromos_5e0a7d_idx'), models.Index(fields=['gene_symbol'], name='variants_va_gene_sy_7f428f_idx'), models.Index(fields=['variant_id'], name='variants_va_variant_c41b0f_idx'), models.Index(fields=['impact'], name='variants_va_impact_f27c89_idx'), models.Index(fields=['consequence'], name='variants_va_consequ_4bd76d_idx')],
            },
        ),
        migrations.CreateModel(
            name='COSMICData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cosmic_id', models.CharField(db_index=True, help_text='COSMIC mutation ID', max_length=50, unique=True)),
                ('mutation_description', models.TextField(blank=True, help_text='Description of the mutation', null=True)),
                ('mutation_cds', models.CharField(blank=True, help_text='CDS mutation notation', max_length=200, null=True)),
                ('mutation_aa', models.CharField(blank=True, help_text='Amino acid mutation notation', max_length=200, null=True)),
                ('primary_site', models.CharField(blank=True, help_text='Primary cancer site', max_length=100, null=True)),
                ('site_subtype', models.CharField(blank=True, help_text='Cancer site subtype', max_length=100, null=True)),
                ('primary_histology', models.CharField(blank=True, help_text='Primary histology', max_length=100, null=True)),
                ('histology_subtype', models.CharField(blank=True, help_text='Histology subtype', max_length=100, null=True)),
                ('sample_name', models.CharField(blank=True, help_text='Sample identifier', max_length=100, null=True)),
                ('sample_source', models.CharField(blank=True, help_text='Sample source', max_length=100, null=True)),
                ('tumour_origin', models.CharField(blank=True, choices=[('primary', 'Primary'), ('metastasis', 'Metastasis'), ('recurrence', 'Recurrence'), ('cell_line', 'Cell Line')], help_text='Tumour origin type', max_length=50, null=True)),
                ('mutation_frequency', models.FloatField(blank=True, help_text='Mutation frequency', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('mutation_count', models.PositiveIntegerField(blank=True, help_text='Number of samples with this mutation', null=True)),
                ('cosmic_data', models.JSONField(blank=True, default=dict, help_text='Additional COSMIC data as JSON')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('variant', models.ForeignKey(help_text='Associated genetic variant', on_delete=django.db.models.deletion.CASCADE, related_name='cosmic_data', to='variants.variant')),
            ],
            options={
                'verbose_name': 'COSMIC Data',
                'verbose_name_plural': 'COSMIC Data Records',
                'ordering': ['cosmic_id'],
            },
        ),
        migrations.CreateModel(
            name='VariantAnnotation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_pathogenic', models.BooleanField(default=False, help_text='Whether the variant is classified as pathogenic')),
                ('is_drug_target', models.BooleanField(default=False, help_text='Whether the variant is associated with drug responses')),
                ('has_cosmic_data', models.BooleanField(default=False, help_text='Whether COSMIC data is available for this variant')),
                ('pathogenicity_score', models.FloatField(blank=True, help_text='Pathogenicity score (0-1)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('drug_response_score', models.FloatField(blank=True, help_text='Drug response score (0-1)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('annotation_date', models.DateTimeField(auto_now=True, help_text='Date of last annotation update')),
                ('annotation_version', models.CharField(default='1.0', help_text='Version of annotation pipeline', max_length=20)),
                ('annotation_data', models.JSONField(blank=True, default=dict, help_text='Combined annotation data from all sources')),
                ('variant', models.OneToOneField(help_text='Associated genetic variant', on_delete=django.db.models.deletion.CASCADE, related_name='annotation', to='variants.variant')),
            ],
            options={
                'verbose_name': 'Variant Annotation',
                'verbose_name_plural': 'Variant Annotations',
                'ordering': ['-annotation_date'],
            },
        ),
        migrations.CreateModel(
            name='DrugResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('drug_name', models.CharField(help_text='Name of the drug', max_length=200)),
                ('response_type', models.CharField(choices=[('sensitivity', 'Sensitivity'), ('resistance', 'Resistance'), ('adverse_effect', 'Adverse Effect'), ('reduced_sensitivity', 'Reduced Sensitivity'), ('increased_sensitivity', 'Increased Sensitivity')], help_text='Type of drug response', max_length=50)),
                ('evidence_level', models.CharField(choices=[('A', 'Level A - Validated clinical utility'), ('B', 'Level B - Clinical evidence'), ('C', 'Level C - Case study'), ('D', 'Level D - Preclinical evidence')], help_text='Evidence level classification', max_length=20)),
                ('evidence_direction', models.CharField(choices=[('supports', 'Supports'), ('does_not_support', 'Does Not Support'), ('inconclusive', 'Inconclusive')], help_text='Direction of evidence', max_length=20)),
                ('civic_id', models.CharField(blank=True, db_index=True, help_text='CIViC variant ID', max_length=50, null=True)),
                ('evidence_id', models.CharField(blank=True, help_text='CIViC evidence ID', max_length=50, null=True)),
                ('cancer_type', models.CharField(blank=True, help_text='Type of cancer', max_length=200, null=True)),
                ('tissue_type', models.CharField(blank=True, help_text='Tissue type', max_length=100, null=True)),
                ('civic_data', models.JSONField(blank=True, default=dict, help_text='Additional CIViC data as JSON')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('variant', models.ForeignKey(help_text='Associated genetic variant', on_delete=django.db.models.deletion.CASCADE, related_name='drug_responses', to='variants.variant')),
            ],
            options={
                'verbose_name': 'Drug Response',
                'verbose_name_plural': 'Drug Responses',
                'ordering': ['drug_name', 'evidence_level'],
                'unique_together': {('variant', 'civic_id')},
            },
        ),
        migrations.CreateModel(
            name='ClinicalSignificance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('significance', models.CharField(choices=[('pathogenic', 'Pathogenic'), ('likely_pathogenic', 'Likely Pathogenic'), ('uncertain_significance', 'Uncertain Significance'), ('likely_benign', 'Likely Benign'), ('benign', 'Benign'), ('conflicting', 'Conflicting Interpretations')], help_text='Clinical significance classification', max_length=30)),
                ('review_status', models.CharField(blank=True, choices=[('reviewed_by_expert_panel', 'Reviewed by Expert Panel'), ('criteria_provided_single_submitter', 'Criteria Provided, Single Submitter'), ('criteria_provided_multiple_submitters', 'Criteria Provided, Multiple Submitters'), ('no_assertion_criteria_provided', 'No Assertion Criteria Provided'), ('no_assertion_provided', 'No Assertion Provided')], help_text='ClinVar review status', max_length=50, null=True)),
                ('review_date', models.DateField(blank=True, help_text='Date of last review', null=True)),
                ('clinvar_id', models.CharField(blank=True, db_index=True, help_text='ClinVar variation ID', max_length=50, null=True)),
                ('evidence_level', models.CharField(blank=True, help_text="Evidence level (e.g., '1', '2A', '2B')", max_length=50, null=True)),
                ('phenotype', models.TextField(blank=True, help_text='Associated phenotype or condition', null=True)),
                ('inheritance_pattern', models.CharField(blank=True, help_text="Inheritance pattern (e.g., 'Autosomal dominant')", max_length=50, null=True)),
                ('clinvar_data', models.JSONField(blank=True, default=dict, help_text='Additional ClinVar data as JSON')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('variant', models.ForeignKey(help_text='Associated genetic variant', on_delete=django.db.models.deletion.CASCADE, related_name='clinical_significance', to='variants.variant')),
            ],
            options={
                'verbose_name': 'Clinical Significance',
                'verbose_name_plural': 'Clinical Significance Records',
                'ordering': ['-review_date', 'significance'],
                'unique_together': {('variant', 'clinvar_id')},
            },
        ),
    ]
